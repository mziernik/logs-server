import {Record, Repository, Field, Cell, Column, RepoConfig, Dev, Utils, CRUDE, Ready} from "../../core.js";
import {Icon} from "../../components.js";

/**
 * Demonstracyjne repozytoria
 */


let dataGenerated = false;

//----------------------------------------------------------------------------------------------------------------------

export class RType extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "key";
        c.name = "ID";
        c.type = "char";
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static NAME: Column = new Column((c: Column) => {
        c.key = "name";
        c.name = "Nazwa";
        c.type = "string";
        c.required = true;
        c.unique = true;
    });

    static ALLOWED_STATUSES: Column = new Column((c: Column) => {
        c.key = "allowedStatuses";
        c.name = "Dozwolone statusy";
        c.type = "key[]";
        c.required = true;
        c.unique = true;
        c.foreign = () => RSTATUS;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-user-type";
            c.name = "Typ";
            c.record = EType;
            c.primaryKeyColumn = RType.ID;
            c.displayNameColumn = RType.NAME;
            c.group = "Demo";
        })
    }
}

export class EType extends Record {
    ID: Cell = new Cell(this, RType.ID);
    NAME: Cell = new Cell(this, RType.NAME);
    ALLOWED_STATUSES: Cell = new Cell(this, RType.ALLOWED_STATUSES);
}

//----------------------------------------------------------------------------------------------------------------------

export class RKind extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "key";
        c.name = "ID";
        c.type = "key";
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static NAME: Column = new Column((c: Column) => {
        c.key = "name";
        c.name = "Nazwa";
        c.type = "string";
        c.required = true;
        c.unique = true;
        c.readOnly = "edit";
    });

    static ALLOWED_TYPE: Column = new Column((c: Column) => {
        c.key = "allowedType";
        c.name = "Typ";
        c.type = "char";
        c.required = true;
        c.unique = true;
        c.foreign = () => RTYPE;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-user-kind";
            c.name = "Rodzaj";
            c.record = EKind;
            c.primaryKeyColumn = RKind.ID;
            c.displayNameColumn = RKind.NAME;
            c.group = "Demo";
        })
    }
}

export class EKind extends Record {
    ID: Cell = new Cell(this, RKind.ID);
    NAME: Cell = new Cell(this, RKind.NAME);
}

//----------------------------------------------------------------------------------------------------------------------

export class RStatus extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "key";
        c.name = "ID";
        c.type = "char";
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static NAME: Column = new Column((c: Column) => {
        c.key = "name";
        c.name = "Nazwa";
        c.type = "string";
        c.required = true;
        c.unique = true;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-user-status";
            c.name = "Status";
            c.record = EStatus;
            c.primaryKeyColumn = RStatus.ID;
            c.displayNameColumn = RStatus.NAME;
            c.group = "Demo";
        })
    }
}

export class EStatus extends Record {
    ID: Cell = new Cell(this, RStatus.ID);
    NAME: Cell = new Cell(this, RStatus.NAME);
}


//----------------------------------------------------------------------------------------------------------------------

export class ROccupations extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "id";
        c.name = "ID";
        c.type = "int";
        c.autoGenerated = true;
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static NAME: Column = new Column((c: Column) => {
        c.key = "name";
        c.name = "Nazwa";
        c.type = "string";
        c.required = true;
        c.unique = true;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-occup";
            c.name = "Zawody";
            c.description = "Słownik zawodów";
            c.record = ROccupation;
            c.primaryKeyColumn = ROccupations.ID;
            c.displayNameColumn = ROccupations.NAME;
            c.group = "Demo";
        })
    }
}


export class ROccupation extends Record {
    ID: Cell = new Cell(this, ROccupations.ID);
    NAME: Cell = new Cell(this, ROccupations.NAME);
}


//-----------------------------------------------------------------------------

export class RAddresses extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "id";
        c.name = "ID";
        c.type = "int";
        c.autoGenerated = true;
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static USER: Column = new Column((c: Column) => {
        c.key = "user";
        c.name = "Użytkownik";
        c.type = "int";
        c.required = true;
        c.foreign = () => RUSERS;
    });

    static TYPE: Column = new Column((c: Column) => {
        c.key = "type";
        c.name = "Typ";
        c.type = "char";
        c.required = true;
        c.enumerate = {
            "C": "Korespondencyjny",
            'L': "Zamieszkania",
            "M": "Zameldowania",
        }
    });

    static CITY: Column = new Column((c: Column) => {
        c.key = "city";
        c.name = "Miejscowość";
        c.type = "string";
        c.required = true;
    });

    static STREET: Column = new Column((c: Column) => {
        c.key = "street";
        c.name = "Ulica";
        c.type = "string";
    });

    static HOME: Column = new Column((c: Column) => {
        c.key = "home";
        c.name = "Nr domu / mieszkania";
        c.type = "string";
        c.required = true;
    });

    static POST_CODE: Column = new Column((c: Column) => {
        c.key = "postCode";
        c.name = "Kod pocztowy";
        c.type = "string";
        c.required = true;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-addr";
            c.name = "Adresy użytkowników";
            c.description = "Adresy użytkowników / pracowników";
            c.record = RAddress;
            c.primaryKeyColumn = RAddresses.ID;
            c.group = "Demo";
        })
    }

    createRecord(context: any, crude: CRUDE): Record {
        const result: RAddress = super.createRecord(context, crude);
        if (!dataGenerated || crude !== CRUDE.CREATE)
            return result;

        result.TYPE.value = ["C", "L", "M"].random();
        result.CITY.value = Dev.CITIES.random();
        result.POST_CODE.value = Dev.randomPostCode();
        result.STREET.value = Dev.STREETS.random();
        result.HOME.value = Math.round(Math.random() * 500);

        return result;
    }


}

export class RAddress extends Record {
    ID: Cell = new Cell(this, RAddresses.ID);
    USER: Cell = new Cell(this, RAddresses.USER);
    TYPE: Cell = new Cell(this, RAddresses.TYPE);
    CITY: Cell = new Cell(this, RAddresses.CITY);
    STREET: Cell = new Cell(this, RAddresses.STREET);
    HOME: Cell = new Cell(this, RAddresses.HOME);
    POST_CODE: Cell = new Cell(this, RAddresses.POST_CODE);


    get displayValue() {
        return this.STREET.value + " " + this.HOME.value + ", " + this.POST_CODE.value + " " + this.CITY.value;
    }
}

//-------------------------------------------------------------------------------


export class RUsers extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "id";
        c.name = "ID";
        c.type = "int";
        c.autoGenerated = true;
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static TOKEN: Column = new Column((c: Column) => {
        c.key = "token";
        c.name = "Zewnętrzny token";
        c.type = "uid";
        c.hidden = true;
    });

    static LOGIN: Column = new Column((c: Column) => {
        c.key = "login";
        c.name = "Login";
        c.type = "string";
        c.required = true;
        c.unique = true;
        c.readOnly = true;
    });

    static PASS: Column = new Column((c: Column) => {
        c.key = "pass";
        c.name = "Hasło";
        c.type = "password";
        c.hidden = true;
    });

    static ACTIVE: Column = new Column((c: Column) => {
        c.key = "active";
        c.name = "Aktywny";
        c.type = "boolean";
        c.value = true;
    });

    static OCCUPATION: Column = new Column((c: Column) => {
        c.key = "job";
        c.name = "Stanowisko";
        c.unique = true;
        c.type = "int";
        c.foreign = () => ROCCUPATIONS;
    });

    static SPECIALIZATIONS: Column = new Column((c: Column) => {
        c.key = "specializations";
        c.name = "Specjalizacje";
        c.unique = true;
        c.type = "int[]";
        c.foreign = () => ROCCUPATIONS;
    });

    static SEX: Column = new Column((c: Column) => {
        c.key = "sex";
        c.name = "Płeć";
        c.type = "enum";
        c.enumerate = {
            "M": "Mężczyzna",
            "F": "Kobieta"
        };
        c.enumIcons = {
            "M": Icon.MARS,
            "F": Icon.VENUS,
        };
        c.enumStyles = {
            "M": {color: "blue"},
            "F": {color: "red"},
        }
    });

    static FIRST_NAME: Column = new Column((c: Column) => {
        c.key = "firstName";
        c.name = "Imię";
        c.type = "string";
    });

    static LAST_NAME: Column = new Column((c: Column) => {
        c.key = "lastName";
        c.name = "Nazwisko";
        c.type = "string";
    });

    static DISPLAY_NAME: Column = new Column((c: Column) => {
        c.key = "displayName";
        c.name = "Nazwa wyświetlana";
        c.type = "string";
        c.required = true;
    });

    static EMAIL: Column = new Column((c: Column) => {
        c.key = "email";
        c.name = "e-mail";
        c.type = "email";
    });

    static TYPE: Column = new Column((c: Column) => {
        c.key = "type";
        c.name = "Typ";
        c.type = "char";
        c.foreign = () => RTYPE;
        c.value = "E";
    });

    static KIND: Column = new Column((c: Column) => {
        c.key = "kind";
        c.name = "Rodzaje";
        c.type = "key[]";
        c.unique = true;
        c.foreign = {
            repository: () => RKIND,
            constraints: [ // this wskazuje na bieżącą kolumnę
                ["type", "this.allowedType"]
                //   ["this.type", "this.kind.allowedType"] // type.key musi wystąpić w kolumnie demo-users-kind.allowedType
            ]
        };
        //  c.defaultValue = "EO";
    });

    static STATUS: Column = new Column((c: Column) => {
        c.key = "status";
        c.name = "Status";
        c.type = "key[]";
        c.unique = true;
        c.foreign = {
            repository: () => RSTATUS,
            constraints: [ // this wskazuje na bieżącą kolumnę
                ["this", "type.allowedStatuses"],
                //    ["demo-user-status", "this.type.allowedStatuses"] //opcja "demo-user-status.key"
                // dowolna wartość key z repozytorium demo-user-status musi wystąpić w komórce type.allowedStatuses
            ]
        };
    });

    /*
        static SERVICE_KIND: Column = new Column((c: Column) => {
            c.key = "skind";
            c.name = "# Rodzaj usługi";
            c.type = "key";
            // c.foreign = () => RKIND;
            c.foreign = {
                repository: () => RKIND,
                constraints: [
                    ["type", "kind.allowedType"],
                //    ["this.type", "this.kind.allowedType"] // type.key musi wystąpić w kolumnie demo-users-kind.allowedType
                ]
            };
            //  c.defaultValue = "EO";
        });

        static ONLINE_STATUS: Column = new Column((c: Column) => {
            c.key = "ostatus";
            c.name = "# Online status";
            c.type = "key";
            // c.foreign = () => RSTATUS;
            c.foreign = () => RSTATUS;
            c.foreign = {
                repository: () => RSTATUS,
                constraints: [
                    ["this.ostatus", "this.type.allowedStatuses"] //opcja "demo-user-status.key"
                    // dowolna wartość key z repozytorium demo-user-status musi wystąpić w komórce type.allowedStatuses
                ]
            };
        });

    */
    constructor() {
        super((c: RepoConfig) => {
            c.key = "demo-users";
            c.name = "Użytkownicy";
            c.description = "Wszystko co związane z użytkownikami";
            c.record = RUsersRecord;
            c.primaryKeyColumn = RUsers.ID;
            c.displayNameColumn = RUsers.DISPLAY_NAME;
            c.crude = "CRU";
            c.group = "Demo";
            c.local = false;

            c.references = {
                address: {
                    name: "Adres",
                    repo: "demo-addr",
                    column: "user"
                }
            };
            c.actions = {
                add: {record: true, name: "Dodaj", confirm: null, type: "primary", icon: "fa fa-user-plus"},
                rem: {
                    record: true,
                    name: "Usuń",
                    confirm: "Czy na pewno usunąć?",
                    constraints: {
                        "this.enabled": true,
                        "this.type": [1, 3, 4]
                    },
                    params: {
                        name: {
                            type: "string",
                            name: "Imię",
                            required: true,
                            defaultValue: "Jasiu"
                        }
                    },
                    type: "danger",
                    icon: "fa fa-user-times"
                },
                edit: {
                    record: true,
                    name: "Edytuj",
                    type: "primary",
                    icon: "fa fa-user-times"
                },
                addRandom: {
                    record: false,
                    name: "Dodaj losowy",
                    confirm: null,
                    type: "primary",
                    icon: "fa fa-user-plus"
                },
                removeRandom: {
                    record: false,
                    name: "Usuń losowy",
                    confirm: null,
                    type: "danger",
                    icon: "fa fa-user-times"
                }
            };
        });
    }

    addRandom(count: number = 1) {
        const recs = [];
        let maxAddrId = RADDRESSES.max(RAddresses.ID, 0);

        for (let i = 0; i < count; i++) {
            const urec: RUsersRecord = RUSERS.createRecord("DEMO", CRUDE.CREATE);
            const usr = Dev.randomUser();
            urec.ID.value = RUSERS.max(RUsers.ID, 0) + 1 + i;

            urec.FIRST_NAME.value = usr.firstName;
            urec.LAST_NAME.value = usr.lastName;
            urec.DISPLAY_NAME.value = usr.firstName[0] + ". " + usr.lastName;
            urec.LOGIN.value = usr.firstName.toLowerCase() + "." + usr.lastName.toLowerCase();
            urec.EMAIL.value = urec.LOGIN.value + "@email.com";
            urec.ACTIVE.value = Math.random() > 0.5;
            urec.SEX.value = usr.male ? "M" : "F";

            const arr = [];
            for (let j = 1; j < Math.random() * 4; j++)
                arr.push(Utils.randomOfRange(0, Dev.OCCUPATIONS.length));
            urec.SPECIALIZATIONS.value = arr;
            urec.OCCUPATION.value = Utils.randomOfRange(0, Dev.OCCUPATIONS.length);
            recs.push(urec);

            for (let j = 0; j < Math.random() * 8; j++) {
                const arec: RAddress = RADDRESSES.createRecord("DEMO", CRUDE.CREATE);
                arec.ID.value = ++maxAddrId;
                arec.USER.value = urec.ID.value;
                arec.TYPE.value = ["C", "L", "M"].random();
                arec.CITY.value = Dev.CITIES.random();
                arec.POST_CODE.value = Dev.randomPostCode();
                arec.STREET.value = Dev.STREETS.random();
                arec.HOME.value = Math.round(Math.random() * 500);
                recs.push(arec);
            }
        }
        Repository.update("DEMO", recs);
    }

    editRandom() {
        const rec: RUsersRecord = RUSERS.get(this, Utils.forEach(RUSERS.rows, (v, k) => k).random(), true);
        rec.action = CRUDE.UPDATE;

        const usr = Dev.randomUser();

        rec.FIRST_NAME.value = usr.firstName;
        rec.LAST_NAME.value = usr.lastName;
        rec.DISPLAY_NAME.value = usr.firstName[0] + ". " + usr.lastName;
        rec.EMAIL.value = rec.LOGIN.value + "@new.email.com";
        rec.ACTIVE.value = Math.random() > 0.5;
        rec.SEX.value = usr.male ? "M" : "F";

        Repository.update('DEMO', [rec]);
    }


}

export class RUsersRecord extends Record {

    ID: Cell = new Cell(this, RUsers.ID);
    TOKEN: Cell = new Cell(this, RUsers.TOKEN);
    LOGIN: Cell = new Cell(this, RUsers.LOGIN);
    PASS: Cell = new Cell(this, RUsers.PASS);
    ACTIVE: Cell = new Cell(this, RUsers.ACTIVE);
    SEX: Cell = new Cell(this, RUsers.SEX);
    FIRST_NAME: Cell = new Cell(this, RUsers.FIRST_NAME);
    LAST_NAME: Cell = new Cell(this, RUsers.LAST_NAME);
    DISPLAY_NAME: Cell = new Cell(this, RUsers.DISPLAY_NAME);
    EMAIL: Cell = new Cell(this, RUsers.EMAIL);
    OCCUPATION: Cell = new Cell(this, RUsers.OCCUPATION);
    SPECIALIZATIONS: Cell = new Cell(this, RUsers.SPECIALIZATIONS);
    TYPE: Cell = new Cell(this, RUsers.TYPE);
    KIND: Cell = new Cell(this, RUsers.KIND);
    STATUS: Cell = new Cell(this, RUsers.STATUS);
}

const RTYPE: RType = Repository.register(new RType());
const RKIND: RKind = Repository.register(new RKind());
const RSTATUS: RStatus = Repository.register(new RStatus());
const ROCCUPATIONS: ROccupations = Repository.register(new ROccupations());
const RUSERS: RUsers = Repository.register(new RUsers());
const RADDRESSES: RAddresses = Repository.register(new RAddresses());

Utils.forEach([RTYPE, RKIND, RSTATUS,
    ROCCUPATIONS, RUSERS, RADDRESSES], (repo: Repository) => {
    repo.storage = null;
    repo.isReady = true;
    Ready.confirm(Repository, repo);
});

window.addEventListener("load", () => {

    const recs = [];
    Utils.forEach(Dev.OCCUPATIONS, (name, idx) => {
        const rec: ROccupation = ROCCUPATIONS.createRecord("DEMO", CRUDE.CREATE);
        rec.ID.value = idx;
        rec.NAME.value = name;
        recs.push(rec);
    });

    Repository.update("DEMO", {
        "demo-user-type": [
            {key: 'U', name: 'Użytkownik', allowedStatuses: ['A', 'B']},
            {key: 'E', name: 'Pracownik', allowedStatuses: ['Z', 'X', 'C']},
            {key: 'S', name: 'Usługa', allowedStatuses: ['A', 'B']}
        ],
        "demo-user-kind": [
            {key: 'UR', name: 'Użytkownik zarejestrowany', allowedType: 'U'},
            {key: 'UA', name: 'Użytkownik anonimowy', allowedType: 'U'},
            {key: 'EL', name: 'Pracownik fizyczny', allowedType: 'E'},
            {key: 'EO', name: 'Pracownik umysłowy', allowedType: 'E'},
            {key: 'SS', name: 'SOAP', allowedType: 'S'},
            {key: 'SR', name: 'REST', allowedType: 'S'},
            {key: 'SL', name: 'LDAP', allowedType: 'S'}
        ],
        "demo-user-status": [
            {key: 'A', name: 'Online'},
            {key: 'B', name: 'Offline'},
            {key: 'Z', name: 'Pracujący'},
            {key: 'X', name: 'Urlop'},
            {key: 'C', name: 'Zwolniony'}
        ],
    });

    Repository.update("DEMO", recs);

    RUSERS.addRandom(10);

    dataGenerated = true;
});


